//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.14.2
//     from Assets/Control.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Control.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @Control: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @Control()
    {
        asset = InputActionAsset.FromJson(@"{
    ""version"": 1,
    ""name"": ""Control"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""787dd551-c0a9-4765-9c51-09e8c8a7dd77"",
            ""actions"": [
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""4eb48eab-7c1e-48a8-be76-a2c458022ef0"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""c5223637-0fbc-45f8-a5e0-7025f958e94c"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d0c7f9b4-7290-4015-ac3f-62f44450dc26"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""LeftRight"",
                    ""id"": ""0680bba2-d1b2-4a1c-98ff-7e2b88e5cf12"",
                    ""path"": ""1DAxis(whichSideWins=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""586e5cb8-f9e0-4dfb-afbe-91fad7e36737"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""7b0ef161-e5cd-4a1e-b982-140f3e544b44"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
    }

    ~@Control()
    {
        UnityEngine.Debug.Assert(!m_Player.enabled, "This will cause a leak and performance issues, Control.Player.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player input handling
private readonly InputActionMap m_Player;
private readonly InputAction m_Player_Jump;
private readonly InputAction m_Player_Move;
private readonly List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();

/// <summary>
/// Wrapper for the "Player" action map.
/// Provides direct access to Player input actions and their lifecycle methods.
/// </summary>
public struct PlayerActions
{
    private readonly @Control m_Wrapper;

    public PlayerActions(@Control wrapper)
    {
        m_Wrapper = wrapper;
    }

    /// <summary> Exposes the "Jump" action. </summary>
    public InputAction Jump => m_Wrapper.m_Player_Jump;

    /// <summary> Exposes the "Move" action. </summary>
    public InputAction Move => m_Wrapper.m_Player_Move;

    /// <summary> Returns the underlying InputActionMap. </summary>
    public InputActionMap GetMap() => m_Wrapper.m_Player;

    public void Enable() => GetMap().Enable();
    public void Disable() => GetMap().Disable();

    public bool IsEnabled => GetMap().enabled;

    /// <summary> Implicit conversion to InputActionMap for convenience. </summary>
    public static implicit operator InputActionMap(PlayerActions actions) => actions.GetMap();

    /// <summary>
    /// Registers an IPlayerActions instance to receive callbacks for Player actions.
    /// Does nothing if the instance is null or already registered.
    /// </summary>
    public void AddCallbacks(IPlayerActions instance)
    {
        if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance))
            return;

        m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);

        Jump.started += instance.OnJump;
        Jump.performed += instance.OnJump;
        Jump.canceled += instance.OnJump;

        Move.started += instance.OnMove;
        Move.performed += instance.OnMove;
        Move.canceled += instance.OnMove;
    }

    /// <summary>
    /// Removes a registered IPlayerActions instance and its callbacks.
    /// Safe to call even if the instance was not registered.
    /// </summary>
    public void RemoveCallbacks(IPlayerActions instance)
    {
        if (!m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
            return;

        Jump.started -= instance.OnJump;
        Jump.performed -= instance.OnJump;
        Jump.canceled -= instance.OnJump;

        Move.started -= instance.OnMove;
        Move.performed -= instance.OnMove;
        Move.canceled -= instance.OnMove;
    }

    /// <summary>
    /// Replaces all registered callbacks with a new IPlayerActions instance.
    /// Passing null will clear all callbacks.
    /// </summary>
    public void SetCallbacks(IPlayerActions instance)
    {
        foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
        {
            Jump.started -= item.OnJump;
            Jump.performed -= item.OnJump;
            Jump.canceled -= item.OnJump;

            Move.started -= item.OnMove;
            Move.performed -= item.OnMove;
            Move.canceled -= item.OnMove;
        }

        m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();

        if (instance != null)
            AddCallbacks(instance);
    }
}

/// <summary> Provides a PlayerActions instance bound to this wrapper. </summary>
public PlayerActions Player => new PlayerActions(this);

/// <summary>
/// Interface for handling Player input events.
/// Implement this interface to receive "Jump" and "Move" callbacks.
/// </summary>
public interface IPlayerActions
{
    void OnJump(InputAction.CallbackContext context);
    void OnMove(InputAction.CallbackContext context);
}
